question 1
eliska vrzalova 
22/01/2024

main()
start function

 randomNumbers[10]; 

srand(timenullptr));

//dipslays numbers within the array from index position 0-9

for(int count=0; count < 10; count++)
	randomNumbers[count]= (rand()%15)+8; //generates random number between 8-22
	display message " " + randomNumbers[count];
end for

// dipslays numbers within the array from index position 9-0

for (int count=9; count >= 0; count--)
	display message " " + randomNumbers[count];
end for

// displays every second number on the screen i.e. it displays the numbers at index 0, 2, 4, 6, 8

 for(int count = 0; count < 10; count = count + 2)
	display message " " + randomNumbers[count];
end for

end function
---------------------------------------------------------------------------------------------------------------------------
question 2
eliska vrzalova 
22/01/2024

main()
start function

 evenOdd[9];
 MAX_NUMS = 9;
 number = 0;
evenCount = 0;
oddCount = 0;

for(int count = 0; count < MAX_NUMS; count++)
	display message "Enter a number:";
	input number;
	evenOdd[count] = number;
	if(number % 2 == 0)
		evenCount++;
	else
		oddCount++;
	end if
end for

//answer
display message "There are" + evenCount+ "even numbers and" + oddCount+ "odd numbers in the array.";

end function
-----------------------------------------------------------------------------------------------------------------------------------------
question 3
eliska vrzalova 
22/01/2024

main()
start function

 arrayCalculations[8];
 number = 0;
 sum = 0;
 largestNum = 0;
 smallestNum = 11;
 average = 0;
MAX_NUMS = 8;

for(int count = 0; count < MAX_NUMS; count++)
	display message "Enter a number:";
	input number;
	arrayCalculations[count] = number;
	if(number >= 1 and number <= 10)
		sum = sum + number;
		if(number > largestNum)
			largestNum = number;
		end if
		if(number < smallestNum)
			smallestNum = number;
		end if 
	else
		display message"Error: the number must be in the range 1-10"
	end if
end for
 averge = sum / MAX_NUMS;
 
 //answer
 display message "The sum of the numbers is: " +sum;
 display message "The largest numbers is:" + largestNum;
 display message "The smallest number is:" + smallestNum;
 display message "The average is:" + average;
 ------------------------------------------------------------------------------------------------------
 question 4
eliska vrzalova 
24/01/2024

main()
start function

 arrayCalculations[8];
 number = 0;
 largestNum = 0;
 smallestNum = 11;
 largestNumCount = 0;
 smallestNumCount = 0;
MAX_NUMS = 8;

for(int count = 0; count < MAX_NUMS; count++)
	display message "Enter a number:";
	input number;
	arrayCalculations[count] = number;
	if(number >= 1 and number <= 10)
		if(number > largestNum)
			largestNum = number;
		if(number == largestNum)
			largestNumCount;
		end if
		if(number < smallestNum)
			smallestNum = number;
		end if 
		if(number == smallestNum)
			smallestNumCount;
	else
		display message"Error: the number must be in the range 1-10"
	end if
end for
//answer
display message "The highest number is" + largestNum + " and it appeared " + largestNumCount + "times.";
display message "The lowest number is" + smallestNum + " and it appeared " + smallestNumCount + "times.";
--------------------------------------------------------------------------------------------------------------------------
 question 5
eliska vrzalova 
24/01/2024

std::string temporaryItems[6];
How many strings can you store in the array temporaryItems?
6 strings
What are the cells of the array initialized to?
Nothing - string is by default ""
---------------------------------------------------------------------------------------------------------------------------
 question 6
eliska vrzalova 
24/01/2024

global variables - variables declared above outside all functions so every function can see them, knows them, can use the but also potentially corrupt them

// The following variables are GLOBAL variables
MAX_PLAYERS = 8;	// maximum number of players
noOfPlayers = 8;	// the number of active players 
namesArray[MAX_PLAYERS];
healthArray[MAX_PLAYERS];

calculateSum();
calculateAvg();
displayPlayers();
displayReversePlayers();
findHighestHealth();
findLowestHealth();

main()
start function
sum = 0;
average = 0;

//function cals
sum = calculateSum();
display message "The sum of players health in array:" + sum;
average = calculateAvg();
display message "The average of players health in array:" + average;
displayPlayers();
displayReversePlayers();
findHighestHealth();
findLowestHealth();
end function

 initializeArrays()
 start function
// Initialize the two arrays

	namesArray[0] = "Tom";
	namesArray[1] = "Sam";
	namesArray[2] = "Ann";
	namesArray[3] = "Ki";
	namesArray[4] = "Joe";
	namesArray[5] = "Ray";
	namesArray[6] = "Dave";
	namesArray[7] = "Sue";

	healthArray[0] = 3;
	healthArray[1] = 6;
	healthArray[2] = 2;
	healthArray[3] = 1;
	healthArray[4] = 4;
	healthArray[5] = 6;
	healthArray[6] = 1;
	healthArray[7] = 6;
end function

calculateSum()
start function
// calculates the sum of players health in the array 
sum = 0;
for(count = 0; count < MAX_PLAYERS; count++)
	sum = sum + healthArray[count];
end for
return sum;
end function

calculateAvg()
start function
// calculates the average of the players health in the array 
average = 0;
sum = 0;
for(count = 0; count < MAX_PLAYERS; count++)
	sum = sum + healthArray[count];
end for
average = sum / MAX_PLAYERS;
return average;
end function

displayPlayers()
start function
// displays the players names and their associated health values to the screen in sequential order within the function.
healthName = ""
for(count = 0; count < MAX_PLAYERS; count++)
	healthName = healthName + "The player" + namesArray[count] + "has health of" + to_string(healthArray[count]);
end for
display message healthName;
end function

displayReversePlayers()
start function
// displays the names and their associated health values in reverse within the function. 

healthNameReverse = "";
for(count = 7; count >= 0; count--)
	healthNameReverse = healthName + "The player" + namesArray[count] + "has health of" + to_string(healthArray[count]);
end for
display message healthName;
end function

findHighestHealth()
start function
// finds the player with the highest health in the array and outputs the name of the player and their highest health within the function. 
// If there is more than one player with the highest health, output only the last player’s name.

highestHealth = 0;
message = "";
count = 0;
position = 0;
for(count = 0; count < MAX_PLAYERS; count++)
	if(highestHealth < healthArray[count])
		highestHealth = healthArray[count];
		position = count;
	end if
	if(highestHealth == healthArray[count])
		position = count;
	end if
end for
message = "Player" + namesArray[count] + "health" + to_string(highestHealth);
display message;
end function

findLowestHealth()
start function
// finds the player with the lowest health in the array and outputs the name of the player and their lowest health within the function. 
//if there is more than one player with the lowest health, output only the first player’s name.
lowestHealth = healthArray[0];
message = "";
for(count = 0; count < MAX_PLAYERS; count++)
	if(lowestHealth > healthArray[count])
		lowestHealth = healthArray[count];
	end if
end for
for(count = 0; count < MAX_PLAYERS; count++)
		if(lowestHealth = = healthArray[count])
			break;
		end if
end for
message = message + " Player " + namesArray[count] + " health " + to_string(lowestHealth);
display message

end fucntion
------------------------------------------------------------------------------------------------------------------------------------------------------------
 question 6 modifs
eliska vrzalova 
29/01/2024

global variables - variables declared above outside all functions so every function can see them, knows them, can use the but also potentially corrupt them

// The following variables are GLOBAL variables
MAX_PLAYERS = 8;	// maximum number of players
noOfPlayers = 8;	// the number of active players 
namesArray[MAX_PLAYERS];
healthArray[MAX_PLAYERS];

findFirstHealthValue(t_healthValue); //string in c++
findAllHealthValue(t_allHealthValues); // string in c++
findLastName(t_inputName); // string in c++
main()
start function 

healthValue = 0;
display message "Enter a health value:";
input healthValue;
firstOccurence = "";
firstOccurence = findFirstHealthValue(healthValue);
display firstOccurence

allHealthValues = 0;
display message "Enter a health value:";
input allHealthValues;
allOccurences = "";
allOccurences = findAllHealthValue(allHealthValues);
display allOccurences;

inputName = "";
display message "Enter a name:";
input inputName;
foundName = "";
foundName = findLastName(inputName); 
display foundName;


 initializeArrays()
 start function
// Initialize the two arrays

	namesArray[0] = "Tom";
	namesArray[1] = "Sam";
	namesArray[2] = "Ann";
	namesArray[3] = "Ki";
	namesArray[4] = "Joe";
	namesArray[5] = "Ray";
	namesArray[6] = "Dave";
	namesArray[7] = "Sue";

	healthArray[0] = 3;
	healthArray[1] = 6;
	healthArray[2] = 2;
	healthArray[3] = 1;
	healthArray[4] = 4;
	healthArray[5] = 6;
	healthArray[6] = 1;
	healthArray[7] = 6;
end function

//q7 modification
findFirstHealthValue(t_healthValue)
//  accepts a health value argument and then searches for the first occurrence of that particular health value in the array. 
// If it finds it, it should return its index position within the array. If it is not in the array the function should return -1. 
start function

findFirstOccurrence = false;
message = "";
count = 0;
for(count = 0; count < MAX_PLAYERS; count++)
	if(t_healthValue == healthArray[count])
		findFirstHealthValue = true;
		break;
	end if
end for 
if(findFirstOccurrence == true)
	message = "The health value of" + to_string(t_healthValue) + " was found at index position" + to_string(count);
else
	message = "Health value of" +  to_string(t_healthValue) + " was not found in the array";
end if
return message;
end function
		
// q8 modification
findAllHealthValue(t_allHealthValues)
// accepts a health value argument and then searches for all occurrences of that particular health value in the array
// If it finds it, it should output to the screen the list of players with that health value.  If it is not in the array the function should output to the screen “No player found with that health value”. 
start function

findAllOccurences = false;
message = "";
count =0;

for (count; count < MAX_PLAYERS; count++)
	if(t_allHealthValues == healthArray[count])
		message = message + namesArray[count];
		findAllOccurences = true;
	end if
end for
if(findAllOccurences == true)
	message = "No player with such health value found in the array.";
end if
return message;
end function

// q9 modification
findLastName(t_inputName)
// accepts a name value argument and then searches for the last occurrence of that particular name in the array
// If it finds it, it should return its index position within the array. If it is not in the array the function should return -1. 
// last occurrence
start function
findName = false
message = "";
count = 0;

for(count= MAX_PLAYERS - 1; count >= 0 ; count--)
	if(t_inputName == namesArray[count])
		findName = true;
		break;
	end if
end for
if(findName == true)
	message = "Name" + namesArray[count] + "found in the array at index position"+ to_string(count);
else
	message = "Name not found in the array."
end if
return message;
end function